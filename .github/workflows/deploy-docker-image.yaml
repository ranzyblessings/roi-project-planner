name: Deploy Docker Image

on:
  workflow_run:
    workflows: [ "Build and Test Application" ]
    types:
      - completed

jobs:
  dockerize_and_deploy:
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.event == 'push' &&
          github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up JDK 23 (Amazon Corretto)
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'corretto'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker images using Cloud Native Buildpacks
        run: |
          IMAGE_NAME="ranzyblessingsdocker/roi-project-planner"
          TAG_LATEST="${IMAGE_NAME}:latest"
          # Use the commit SHA from the triggering workflow
          TAG_SHA="${IMAGE_NAME}:${{ github.event.workflow_run.head_commit.id }}"
          
          ./gradlew bootBuildImage --imageName=$TAG_LATEST
          ./gradlew bootBuildImage --imageName=$TAG_SHA

      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'ranzyblessingsdocker/roi-project-planner:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push the Docker images to Docker Hub
        run: |
          IMAGE_NAME="ranzyblessingsdocker/roi-project-planner"
          docker push ${IMAGE_NAME}:${{ github.event.workflow_run.head_commit.id }}
          docker push ${IMAGE_NAME}:latest

  cleanup:
    needs: dockerize_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Remove unused Docker images
        run: docker image prune -f